# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  docker_acr: 'zippymalvern.azurecr.io'
  acr_login: 'zippymalvern'
  nodejs_version: '18.x'

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm run test:ci
    - uses: actions/upload-artifact@v3
      with:
        name: site
        path: dist/zippy-angles
  
  build_docker:
    runs-on: ubuntu-latest

    steps:
        - uses: actions/checkout@v3
        - name: Use Node.js ${{ env.node_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ env.node_version }}
            cache: 'npm'
        - run: docker build . -t zippy-angles
        - uses: azure/docker-login@v1
          if: github.event_name == 'push'
          with:
            login-server: ${{ env.docker_acr }} # default: index.docker.io
            username: '${{ env.acr_login }}'
            password: ${{ secrets.ACR_PASSWORD }}
        - name: publish to acr
          if: github.event_name == 'push'
          run: docker push contoso.azurecr.io/zippy-angles:${{ github.sha }}

  deploy_sdf:
    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/download-artifact@v3
      with:
        name: site
        path: www
    
    - uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
        ARGS: "-rlgoDzvc -i"
        SOURCE: "www/"
        REMOTE_HOST: sdf.org
        REMOTE_USER: zippy1981
        TARGET: /www/nz/z/zippy1981
        SCRIPT_AFTER: |
          # fix permissions
          mkhomepg -p
      
              
